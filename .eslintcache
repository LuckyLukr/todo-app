[{"C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\index.js":"1","C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\app.js":"2","C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\components\\Form.js":"3","C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\components\\FilterButtons.js":"4","C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\components\\TaskComponent.js":"5"},{"size":162,"mtime":1609366136040,"results":"6","hashOfConfig":"7"},{"size":4289,"mtime":1610798542854,"results":"8","hashOfConfig":"7"},{"size":772,"mtime":1609350574320,"results":"9","hashOfConfig":"7"},{"size":775,"mtime":1609864331896,"results":"10","hashOfConfig":"7"},{"size":1998,"mtime":1610099706495,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"zyj3p7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\index.js",[],["25","26"],"C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\app.js",["27"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './index.css';\r\n\r\nimport Task from \"./components/TaskComponent\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButtons from \"./components/FilterButtons\";\r\n\r\nconst App = () => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [taskFilter, setTaskFilter] = useState('all');\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/')\r\n            .then(res => {\r\n                const data = res.data;\r\n                let singleTask = {\r\n                    id: '',\r\n                    name: '',\r\n                    completed: false,\r\n                    askForDelete: false\r\n                }\r\n                const allTasks = [];\r\n                    \r\n                    for (let i = 0; i < data.length; i++){\r\n                        singleTask = {\r\n                            id: data[i]._id,\r\n                            name: data[i].name,\r\n                            completed: data[i].completed,\r\n                            askForDelete: false\r\n                        }\r\n                    allTasks.push(singleTask);\r\n                    }\r\n                setTasks([...tasks, ...allTasks]);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n    \r\n    const addTask = name => {\r\n        const newTask = { id: tasks.length + 1 , name, completed: false, askForDelete: false };\r\n        axios.post('http://localhost:5000/', newTask);\r\n        setTasks([...tasks, newTask]);\r\n    }\r\n\r\n    const handleComplete = taskId => {\r\n        const newTasks = [...tasks];\r\n        newTasks.forEach(e => taskId === e.id ? e.completed = !e.completed : '');\r\n        setTasks(newTasks);\r\n        const updateTask = newTasks.filter(e => taskId === e.id);\r\n        axios.post('http://localhost:5000/' + taskId, ...updateTask);\r\n    }\r\n\r\n    const handleAskForDelete = taskId => {\r\n        const newTasks = [...tasks];\r\n        newTasks.forEach(e => taskId === e.id ? e.askForDelete = !e.askForDelete : '');\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    const handleDelete = taskId => {\r\n        axios.delete('http://localhost:5000/' + taskId)\r\n        const newTasks = [...tasks];\r\n        const index = newTasks.findIndex(e => e.id === taskId);\r\n        newTasks.splice(index, 1);\r\n        setTasks(newTasks);\r\n    }\r\n    \r\n    const handleEdit = taskId => {\r\n        const newTask = [...tasks];\r\n        const newText = prompt('Edit');\r\n        newTask.forEach(e => taskId === e.id && newText.length > 0 ?  e.name = newText : alert('Type something...'));\r\n        setTasks(newTask);\r\n        axios.post('http://localhost:5000/' + taskId, ...newTask);\r\n        }\r\n    const handleCompletedTasks = () => setTaskFilter('completed');\r\n\r\n    const handleAllTasks = () => setTaskFilter('all');\r\n\r\n    const handleInompletedTasks = () => setTaskFilter('incompleted');\r\n\r\n    const getFilteredTasks = () => {\r\n        switch (taskFilter) {\r\n            case 'completed':\r\n                return tasks.filter(e => e.completed);\r\n            case 'incompleted':\r\n                return tasks.filter(e => !e.completed);\r\n            default:\r\n                return tasks;\r\n        }\r\n    }\r\n\r\n    const tasksNumber = getFilteredTasks().length;\r\n    \r\n    const taskList = getFilteredTasks().map( task =>\r\n         <Task \r\n             id={task.id}\r\n             name={task.name}\r\n             completed={task.completed}\r\n             askForDelete={task.askForDelete}\r\n             key={task.id} \r\n             onCompleted={handleComplete}\r\n             onDeleted={handleDelete}\r\n             onEdit={handleEdit}\r\n             onAskForDelete={handleAskForDelete}\r\n         />);\r\n\r\n    return (\r\n    <div className='app'>\r\n        <div className='header '>\r\n            <Form addTask={addTask} />\r\n            <FilterButtons\r\n                  tasksNumber={tasksNumber}\r\n                  onShowCompleted={handleCompletedTasks}\r\n                  onShowAll={handleAllTasks}\r\n                  onShowIncompleted={handleInompletedTasks}\r\n            />\r\n        </div>\r\n    \r\n        <div className=\"todoListContainer\">\r\n            <ul className=\"todoList\" >\r\n             {taskList}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default App;","C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\components\\Form.js",[],"C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\components\\FilterButtons.js",[],["28","29"],"C:\\Users\\mrluk\\Documents\\projects\\task-app\\src\\components\\TaskComponent.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":38,"column":8,"nodeType":"36","endLine":38,"endColumn":10,"suggestions":"37"},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tasks'. Either include it or remove the dependency array. You can also do a functional update 'setTasks(t => ...)' if you only need 'tasks' in the 'setTasks' call.","ArrayExpression",["42"],["40"],["41"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [tasks]",{"range":"45","text":"46"},[1293,1295],"[tasks]"]